// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcenter.proto

/*
Package tcenter is a generated protocol buffer package.

It is generated from these files:
	tcenter.proto

It has these top-level messages:
	IfInfo
	HostInfo
	LoginReq
	LoginRsp
	HealthReq
	EmptyRsp
	ListClientsReq
	ListClientsRsp
*/
package tcenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IfInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mac  string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Mask string `protobuf:"bytes,4,opt,name=mask" json:"mask,omitempty"`
}

func (m *IfInfo) Reset()                    { *m = IfInfo{} }
func (m *IfInfo) String() string            { return proto.CompactTextString(m) }
func (*IfInfo) ProtoMessage()               {}
func (*IfInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IfInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IfInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *IfInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IfInfo) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

type HostInfo struct {
	Os         string    `protobuf:"bytes,1,opt,name=os" json:"os,omitempty"`
	Arch       string    `protobuf:"bytes,2,opt,name=arch" json:"arch,omitempty"`
	Hostname   string    `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Interfaces []*IfInfo `protobuf:"bytes,4,rep,name=interfaces" json:"interfaces,omitempty"`
	Envs       []string  `protobuf:"bytes,5,rep,name=envs" json:"envs,omitempty"`
	Numcpu     int32     `protobuf:"varint,6,opt,name=numcpu" json:"numcpu,omitempty"`
}

func (m *HostInfo) Reset()                    { *m = HostInfo{} }
func (m *HostInfo) String() string            { return proto.CompactTextString(m) }
func (*HostInfo) ProtoMessage()               {}
func (*HostInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HostInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *HostInfo) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *HostInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostInfo) GetInterfaces() []*IfInfo {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *HostInfo) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *HostInfo) GetNumcpu() int32 {
	if m != nil {
		return m.Numcpu
	}
	return 0
}

type LoginReq struct {
	HostInfo *HostInfo `protobuf:"bytes,1,opt,name=hostInfo" json:"hostInfo,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginReq) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type LoginRsp struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *LoginRsp) Reset()                    { *m = LoginRsp{} }
func (m *LoginRsp) String() string            { return proto.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()               {}
func (*LoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRsp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HealthReq struct {
	Id       uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	HostInfo *HostInfo `protobuf:"bytes,2,opt,name=hostInfo" json:"hostInfo,omitempty"`
}

func (m *HealthReq) Reset()                    { *m = HealthReq{} }
func (m *HealthReq) String() string            { return proto.CompactTextString(m) }
func (*HealthReq) ProtoMessage()               {}
func (*HealthReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HealthReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HealthReq) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

type EmptyRsp struct {
}

func (m *EmptyRsp) Reset()                    { *m = EmptyRsp{} }
func (m *EmptyRsp) String() string            { return proto.CompactTextString(m) }
func (*EmptyRsp) ProtoMessage()               {}
func (*EmptyRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ListClientsReq struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ListClientsReq) Reset()                    { *m = ListClientsReq{} }
func (m *ListClientsReq) String() string            { return proto.CompactTextString(m) }
func (*ListClientsReq) ProtoMessage()               {}
func (*ListClientsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListClientsReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListClientsRsp struct {
	ClientInfos []*ListClientsRsp_ClientInfo `protobuf:"bytes,1,rep,name=clientInfos" json:"clientInfos,omitempty"`
}

func (m *ListClientsRsp) Reset()                    { *m = ListClientsRsp{} }
func (m *ListClientsRsp) String() string            { return proto.CompactTextString(m) }
func (*ListClientsRsp) ProtoMessage()               {}
func (*ListClientsRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListClientsRsp) GetClientInfos() []*ListClientsRsp_ClientInfo {
	if m != nil {
		return m.ClientInfos
	}
	return nil
}

type ListClientsRsp_ClientInfo struct {
	Id         uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	HostInfo   *HostInfo `protobuf:"bytes,2,opt,name=hostInfo" json:"hostInfo,omitempty"`
	LastHealth int64     `protobuf:"varint,3,opt,name=lastHealth" json:"lastHealth,omitempty"`
}

func (m *ListClientsRsp_ClientInfo) Reset()                    { *m = ListClientsRsp_ClientInfo{} }
func (m *ListClientsRsp_ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ListClientsRsp_ClientInfo) ProtoMessage()               {}
func (*ListClientsRsp_ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *ListClientsRsp_ClientInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListClientsRsp_ClientInfo) GetHostInfo() *HostInfo {
	if m != nil {
		return m.HostInfo
	}
	return nil
}

func (m *ListClientsRsp_ClientInfo) GetLastHealth() int64 {
	if m != nil {
		return m.LastHealth
	}
	return 0
}

func init() {
	proto.RegisterType((*IfInfo)(nil), "tcenter.IfInfo")
	proto.RegisterType((*HostInfo)(nil), "tcenter.HostInfo")
	proto.RegisterType((*LoginReq)(nil), "tcenter.LoginReq")
	proto.RegisterType((*LoginRsp)(nil), "tcenter.LoginRsp")
	proto.RegisterType((*HealthReq)(nil), "tcenter.HealthReq")
	proto.RegisterType((*EmptyRsp)(nil), "tcenter.EmptyRsp")
	proto.RegisterType((*ListClientsReq)(nil), "tcenter.ListClientsReq")
	proto.RegisterType((*ListClientsRsp)(nil), "tcenter.ListClientsRsp")
	proto.RegisterType((*ListClientsRsp_ClientInfo)(nil), "tcenter.ListClientsRsp.ClientInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TCenterService service

type TCenterServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	ListClients(ctx context.Context, in *ListClientsReq, opts ...grpc.CallOption) (*ListClientsRsp, error)
}

type tCenterServiceClient struct {
	cc *grpc.ClientConn
}

func NewTCenterServiceClient(cc *grpc.ClientConn) TCenterServiceClient {
	return &tCenterServiceClient{cc}
}

func (c *tCenterServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := grpc.Invoke(ctx, "/tcenter.TCenterService/login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tCenterServiceClient) Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := grpc.Invoke(ctx, "/tcenter.TCenterService/health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tCenterServiceClient) ListClients(ctx context.Context, in *ListClientsReq, opts ...grpc.CallOption) (*ListClientsRsp, error) {
	out := new(ListClientsRsp)
	err := grpc.Invoke(ctx, "/tcenter.TCenterService/listClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TCenterService service

type TCenterServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	Health(context.Context, *HealthReq) (*EmptyRsp, error)
	ListClients(context.Context, *ListClientsReq) (*ListClientsRsp, error)
}

func RegisterTCenterServiceServer(s *grpc.Server, srv TCenterServiceServer) {
	s.RegisterService(&_TCenterService_serviceDesc, srv)
}

func _TCenterService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCenterServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcenter.TCenterService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCenterServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TCenterService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCenterServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcenter.TCenterService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCenterServiceServer).Health(ctx, req.(*HealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TCenterService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCenterServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcenter.TCenterService/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCenterServiceServer).ListClients(ctx, req.(*ListClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcenter.TCenterService",
	HandlerType: (*TCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _TCenterService_Login_Handler,
		},
		{
			MethodName: "health",
			Handler:    _TCenterService_Health_Handler,
		},
		{
			MethodName: "listClients",
			Handler:    _TCenterService_ListClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcenter.proto",
}

func init() { proto.RegisterFile("tcenter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x56, 0x92, 0x36, 0x64, 0x27, 0xda, 0x00, 0x73, 0x60, 0xa3, 0x1c, 0x50, 0xe4, 0x53, 0x2f,
	0xdb, 0x95, 0xca, 0x89, 0x13, 0x87, 0x82, 0xb4, 0x45, 0x3d, 0x19, 0x5e, 0x20, 0xa4, 0x2e, 0xb1,
	0x9a, 0xc4, 0x6e, 0xec, 0x56, 0xe2, 0x89, 0x38, 0xf3, 0x0c, 0xbc, 0x18, 0xb2, 0xf3, 0xdb, 0xaa,
	0x88, 0x03, 0xb7, 0x99, 0xf1, 0x7c, 0xdf, 0x37, 0xf3, 0x8d, 0x0c, 0xf7, 0x3a, 0x67, 0xb5, 0x66,
	0xcd, 0x52, 0x36, 0x42, 0x0b, 0x7c, 0xd1, 0xa5, 0x84, 0x82, 0xbf, 0xd9, 0x6f, 0xea, 0xbd, 0x40,
	0x84, 0x59, 0x9d, 0x55, 0x2c, 0x76, 0x52, 0x67, 0x71, 0x47, 0x6d, 0x8c, 0xaf, 0xc0, 0xab, 0xb2,
	0x3c, 0x76, 0x6d, 0xc9, 0x84, 0x18, 0x81, 0xcb, 0x65, 0xec, 0xd9, 0x82, 0xcb, 0xa5, 0x41, 0x55,
	0x99, 0x3a, 0xc4, 0xb3, 0x16, 0x65, 0x62, 0xf2, 0xd3, 0x81, 0xe0, 0x59, 0x28, 0x6d, 0x69, 0x23,
	0x70, 0x85, 0xea, 0x48, 0x5d, 0xa1, 0x0c, 0x20, 0x6b, 0xf2, 0xa2, 0xe3, 0xb4, 0x31, 0x26, 0x10,
	0x14, 0x42, 0x69, 0x2b, 0xdf, 0x52, 0x0f, 0x39, 0x3e, 0x01, 0x70, 0x33, 0xe9, 0x3e, 0xcb, 0x99,
	0x8a, 0x67, 0xa9, 0xb7, 0x08, 0x57, 0x2f, 0x97, 0xfd, 0x36, 0xed, 0xec, 0x74, 0xd2, 0x62, 0x04,
	0x58, 0x7d, 0x56, 0xf1, 0x3c, 0xf5, 0x8c, 0x80, 0x89, 0xf1, 0x0d, 0xf8, 0xf5, 0xa9, 0xca, 0xe5,
	0x29, 0xf6, 0x53, 0x67, 0x31, 0xa7, 0x5d, 0x46, 0xde, 0x43, 0xb0, 0x15, 0xdf, 0x79, 0x4d, 0xd9,
	0x11, 0x1f, 0xdb, 0x21, 0x0c, 0x9f, 0x1d, 0x37, 0x5c, 0xbd, 0x1e, 0x64, 0xfa, 0x6d, 0xe8, 0xd0,
	0x42, 0x92, 0x1e, 0xaa, 0xa4, 0x35, 0x65, 0x67, 0x41, 0xf7, 0xd4, 0xe5, 0x3b, 0xf2, 0x19, 0xee,
	0x9e, 0x59, 0x56, 0xea, 0xc2, 0xf0, 0x5e, 0x3d, 0x5e, 0xe8, 0xb8, 0xff, 0xd6, 0x01, 0x08, 0x3e,
	0x55, 0x52, 0xff, 0xa0, 0x4a, 0x92, 0x14, 0xa2, 0x2d, 0x57, 0x7a, 0x5d, 0x72, 0x56, 0x6b, 0x75,
	0x83, 0x9c, 0xfc, 0x76, 0x2e, 0x5b, 0x94, 0xc4, 0x8f, 0x10, 0xe6, 0x36, 0x33, 0x74, 0xe6, 0x12,
	0xc6, 0x41, 0x32, 0x48, 0x5e, 0x76, 0x2f, 0xd7, 0x43, 0x2b, 0x9d, 0xc2, 0x92, 0x03, 0xc0, 0xf8,
	0xf4, 0x9f, 0x3b, 0xe1, 0x5b, 0x80, 0x32, 0x53, 0xba, 0xf5, 0xc8, 0x5e, 0xdc, 0xa3, 0x93, 0xca,
	0xea, 0x97, 0x03, 0xd1, 0xd7, 0xb5, 0x85, 0x7f, 0x61, 0xcd, 0x99, 0xe7, 0x0c, 0x1f, 0x61, 0x5e,
	0x1a, 0xbb, 0x71, 0x24, 0xee, 0x2f, 0x97, 0x5c, 0x97, 0x94, 0xc4, 0x27, 0xf0, 0x0b, 0xcb, 0x85,
	0x38, 0x0e, 0xd2, 0x9f, 0x64, 0x02, 0xe8, 0xad, 0xc5, 0x0f, 0x10, 0x96, 0xa3, 0x13, 0xf8, 0x70,
	0xd3, 0x1f, 0x76, 0x4c, 0x1e, 0xfe, 0x62, 0xdc, 0x37, 0xdf, 0x7e, 0xac, 0x77, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0xba, 0x4d, 0x79, 0x69, 0x03, 0x00, 0x00,
}
