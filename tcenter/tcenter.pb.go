// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcenter.proto

/*
Package tcenter is a generated protocol buffer package.

It is generated from these files:
	tcenter.proto

It has these top-level messages:
	HelloReq
	HelloRsp
*/
package tcenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloReq struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HelloRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *HelloRsp) Reset()                    { *m = HelloRsp{} }
func (m *HelloRsp) String() string            { return proto.CompactTextString(m) }
func (*HelloRsp) ProtoMessage()               {}
func (*HelloRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HelloRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "tcenter.HelloReq")
	proto.RegisterType((*HelloRsp)(nil), "tcenter.HelloRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TCenterService service

type TCenterServiceClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error)
}

type tCenterServiceClient struct {
	cc *grpc.ClientConn
}

func NewTCenterServiceClient(cc *grpc.ClientConn) TCenterServiceClient {
	return &tCenterServiceClient{cc}
}

func (c *tCenterServiceClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error) {
	out := new(HelloRsp)
	err := grpc.Invoke(ctx, "/tcenter.TCenterService/hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TCenterService service

type TCenterServiceServer interface {
	Hello(context.Context, *HelloReq) (*HelloRsp, error)
}

func RegisterTCenterServiceServer(s *grpc.Server, srv TCenterServiceServer) {
	s.RegisterService(&_TCenterService_serviceDesc, srv)
}

func _TCenterService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCenterServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcenter.TCenterService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCenterServiceServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TCenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcenter.TCenterService",
	HandlerType: (*TCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hello",
			Handler:    _TCenterService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcenter.proto",
}

func init() { proto.RegisterFile("tcenter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x49, 0x4e, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x64, 0xb8,
	0x38, 0x3c, 0x52, 0x73, 0x72, 0xf2, 0x83, 0x52, 0x0b, 0x85, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x03, 0x98, 0x6c, 0x71, 0x81, 0x90,
	0x10, 0x17, 0x4b, 0x72, 0x7e, 0x4a, 0x2a, 0x58, 0x9a, 0x35, 0x08, 0xcc, 0x86, 0xe9, 0x60, 0x82,
	0xeb, 0x30, 0xb2, 0xe7, 0xe2, 0x0b, 0x71, 0x06, 0x1b, 0x1d, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c,
	0x2a, 0xa4, 0xcb, 0xc5, 0x9a, 0x01, 0x32, 0x43, 0x48, 0x50, 0x0f, 0xe6, 0x06, 0x98, 0x8d, 0x52,
	0xe8, 0x42, 0xc5, 0x05, 0x49, 0x6c, 0x60, 0x07, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x23,
	0xe6, 0xda, 0x75, 0xb1, 0x00, 0x00, 0x00,
}
