// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcounter.proto

/*
Package tcounter is a generated protocol buffer package.

It is generated from these files:
	tcounter.proto

It has these top-level messages:
	TimeCount
	CounterMapped
	SendTableReq
	EmptyRsp
*/
package tcounter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TimeCount struct {
	Time  int64  `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Sum   int64  `protobuf:"varint,2,opt,name=sum" json:"sum,omitempty"`
	Count uint64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *TimeCount) Reset()                    { *m = TimeCount{} }
func (m *TimeCount) String() string            { return proto.CompactTextString(m) }
func (*TimeCount) ProtoMessage()               {}
func (*TimeCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TimeCount) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TimeCount) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *TimeCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CounterMapped struct {
	CountList []*TimeCount `protobuf:"bytes,1,rep,name=countList" json:"countList,omitempty"`
}

func (m *CounterMapped) Reset()                    { *m = CounterMapped{} }
func (m *CounterMapped) String() string            { return proto.CompactTextString(m) }
func (*CounterMapped) ProtoMessage()               {}
func (*CounterMapped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CounterMapped) GetCountList() []*TimeCount {
	if m != nil {
		return m.CountList
	}
	return nil
}

type SendTableReq struct {
	Table map[uint32]*CounterMapped `protobuf:"bytes,1,rep,name=table" json:"table,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SendTableReq) Reset()                    { *m = SendTableReq{} }
func (m *SendTableReq) String() string            { return proto.CompactTextString(m) }
func (*SendTableReq) ProtoMessage()               {}
func (*SendTableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendTableReq) GetTable() map[uint32]*CounterMapped {
	if m != nil {
		return m.Table
	}
	return nil
}

type EmptyRsp struct {
}

func (m *EmptyRsp) Reset()                    { *m = EmptyRsp{} }
func (m *EmptyRsp) String() string            { return proto.CompactTextString(m) }
func (*EmptyRsp) ProtoMessage()               {}
func (*EmptyRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*TimeCount)(nil), "tcounter.TimeCount")
	proto.RegisterType((*CounterMapped)(nil), "tcounter.CounterMapped")
	proto.RegisterType((*SendTableReq)(nil), "tcounter.SendTableReq")
	proto.RegisterType((*EmptyRsp)(nil), "tcounter.EmptyRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TCounterService service

type TCounterServiceClient interface {
	SendTable(ctx context.Context, in *SendTableReq, opts ...grpc.CallOption) (*EmptyRsp, error)
}

type tCounterServiceClient struct {
	cc *grpc.ClientConn
}

func NewTCounterServiceClient(cc *grpc.ClientConn) TCounterServiceClient {
	return &tCounterServiceClient{cc}
}

func (c *tCounterServiceClient) SendTable(ctx context.Context, in *SendTableReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := grpc.Invoke(ctx, "/tcounter.TCounterService/sendTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TCounterService service

type TCounterServiceServer interface {
	SendTable(context.Context, *SendTableReq) (*EmptyRsp, error)
}

func RegisterTCounterServiceServer(s *grpc.Server, srv TCounterServiceServer) {
	s.RegisterService(&_TCounterService_serviceDesc, srv)
}

func _TCounterService_SendTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCounterServiceServer).SendTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcounter.TCounterService/SendTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCounterServiceServer).SendTable(ctx, req.(*SendTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TCounterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcounter.TCounterService",
	HandlerType: (*TCounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendTable",
			Handler:    _TCounterService_SendTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcounter.proto",
}

func init() { proto.RegisterFile("tcounter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xc1, 0x4e, 0x83, 0x40,
	0x14, 0xcc, 0x96, 0x62, 0xca, 0xab, 0x55, 0xf3, 0x34, 0x4a, 0x7a, 0x42, 0x4e, 0x5c, 0x24, 0x11,
	0x0f, 0x35, 0x1e, 0x6d, 0x1a, 0x13, 0xa3, 0x07, 0xb7, 0xfc, 0x00, 0x6d, 0xdf, 0x81, 0x58, 0x60,
	0x85, 0xa5, 0x09, 0xbf, 0xe2, 0xd7, 0x9a, 0xdd, 0x2d, 0xac, 0x26, 0xde, 0xe6, 0x0d, 0x33, 0xc3,
	0x4c, 0x16, 0xce, 0xe4, 0xb6, 0x6a, 0x4b, 0x49, 0x75, 0x2c, 0xea, 0x4a, 0x56, 0x38, 0xe9, 0xef,
	0xf0, 0x05, 0xbc, 0x34, 0x2f, 0x68, 0xa9, 0x4e, 0x44, 0x18, 0xcb, 0xbc, 0x20, 0x9f, 0x05, 0x2c,
	0x72, 0xb8, 0xc6, 0x78, 0x01, 0x4e, 0xd3, 0x16, 0xfe, 0x48, 0x53, 0x0a, 0xe2, 0x15, 0xb8, 0xda,
	0xed, 0x3b, 0x01, 0x8b, 0xc6, 0xdc, 0x1c, 0xe1, 0x33, 0xcc, 0x96, 0x26, 0xf3, 0x3d, 0x13, 0x82,
	0x76, 0x78, 0x0f, 0x9e, 0xfe, 0xf2, 0x96, 0x37, 0xd2, 0x67, 0x81, 0x13, 0x4d, 0x93, 0xcb, 0x78,
	0xe8, 0x31, 0xfc, 0x94, 0x5b, 0x55, 0xf8, 0xcd, 0xe0, 0x74, 0x4d, 0xe5, 0x2e, 0xcd, 0x36, 0x7b,
	0xe2, 0xf4, 0x85, 0x0b, 0x70, 0xa5, 0xc2, 0x47, 0xff, 0xad, 0xf5, 0xff, 0x96, 0xc5, 0x1a, 0xac,
	0x4a, 0x59, 0x77, 0xdc, 0xe8, 0xe7, 0x1f, 0x00, 0x96, 0x54, 0x1b, 0x3e, 0xa9, 0xd3, 0xb3, 0x66,
	0x5c, 0x41, 0xbc, 0x03, 0xf7, 0x90, 0xed, 0x5b, 0xd2, 0xbb, 0xa6, 0xc9, 0x8d, 0x0d, 0xfe, 0x33,
	0x82, 0x1b, 0xd5, 0xd3, 0xe8, 0x91, 0x85, 0x00, 0x93, 0x55, 0x21, 0x64, 0xc7, 0x1b, 0x91, 0xbc,
	0xc2, 0x79, 0x7a, 0x14, 0xae, 0xa9, 0x3e, 0xe4, 0x5b, 0xc2, 0x05, 0x78, 0x4d, 0xdf, 0x09, 0xaf,
	0xff, 0x2f, 0x3a, 0x47, 0xcb, 0xf7, 0x59, 0x9b, 0x13, 0xfd, 0x24, 0x0f, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0x50, 0x37, 0xc1, 0xa4, 0x01, 0x00, 0x00,
}
